                          NACHOS-USB

                        Eugene W. Stark
                        SUNY at Stony Brook

NACHOS was originally written by Prof. Tom Anderson at UC Berkeley.
About 1998, a translation into Java was made by Prof. Peter Druschel
of Rice University.  Druschel's translation attempted to preserve
the traditional structure and simplicity of the original NACHOS, and
for this reason I decided to use it, rather than the current Berkeley
Java version which seems to have diverged significantly.  After using
Druschel's version in SUNY Stony Brook course CSE 306 in Spring 2003,
I decided that it made sense to reorganize and rewrite parts of the
code to make it more object-oriented, and to make it more like a Java
program rather than a C program that had been translated into Java.
I also wanted to separate the machine emulation from the kernel code
and to make it possible to distribute the machine as a JAR file,
rather than as source code.  This was not because I wanted to make the
machine emulation secret, but rather because having the emulation code
easily available in source form tended to get students confused about
which parts of the code they were supposed to read and modify and
which parts they were supposed to leave alone.  Yet another goal for
the rewrite was to reorganize some things that I found awkward to explain
to students, and to make them more like the way I would naturally
expect a real operating system to be.

This code represents a rewrite I did during the summer of 2003.
Though I have still tried to keep the traditional NACHOS structure,
I have made extensive use of packages to try to make it possible for
students to look at smaller amounts of the code at once and to make
the code more compatible with the Java way of doing things.  The machine
emulation is now in package nachos.machine, which is distributed in
a JAR file.  The kernel code that students are supposed to understand
and feel free to modify is in package nachos.kernel and its subpackages.
As it is impossible to build a "from_scratch" threads implementation
on top of Java, it is necessary to follow Druschel's approach and
build "NACHOS threads" on top of Java threads.  This is my main regret
about the Java version, because students don't get to see how threads
are really implemented "under the covers" as they did with the
original C++ version.  I found that students got confused by the
use of Java threads to implement NACHOS threads, so in this version I
decided to hide the details with the machine emulation.  Thus, the
NACHOS machine provides NACHOS threads as primitive.  The NachosThread
class provided by the machine is extended in the kernel by the UserThread
class, which represents threads that are capable of executing in user
mode.

Besides the reorganization, I added a GUI-based console device that
can interrupt on each keypress.  I also added Javadoc comments for nearly
everything, while trying to keep the text of Anderson's original comments
where they still made sense.
